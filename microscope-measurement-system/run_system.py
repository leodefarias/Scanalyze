#!/usr/bin/env python3
"""
Script de inicializa√ß√£o do Sistema de Micromedi√ß√£o Automatizada.
Este script facilita a execu√ß√£o de todos os componentes do sistema.

Autor: Sistema de Micromedi√ß√£o
Vers√£o: 1.0
"""

import os
import sys
import subprocess
import webbrowser
import time
from pathlib import Path

class SystemLauncher:
    """Classe para gerenciar a inicializa√ß√£o do sistema."""
    
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.java_dir = self.base_dir / "backend-java"
        self.python_dir = self.base_dir / "python-vision"
        self.frontend_dir = self.base_dir / "frontend-dashboard"
        self.data_dir = self.base_dir / "data-integration"
        
    def show_menu(self):
        """Exibe o menu principal."""
        print("üî¨" + "="*60)
        print("     SISTEMA DE MICROMEDI√á√ÉO AUTOMATIZADA")
        print("              Launcher Principal")
        print("="*62)
        print()
        print("Selecione uma op√ß√£o:")
        print()
        print("1Ô∏è‚É£  Executar Backend Java (Demo completa)")
        print("2Ô∏è‚É£  Executar Interface Python (Vis√£o Computacional)")
        print("3Ô∏è‚É£  Abrir Dashboard Web")
        print("4Ô∏è‚É£  Gerar dados de exemplo")
        print("5Ô∏è‚É£  Verificar requisitos do sistema")
        print("6Ô∏è‚É£  Executar integra√ß√£o completa")
        print("7Ô∏è‚É£  Compilar Backend Java")
        print("0Ô∏è‚É£  Sair")
        print()
        
    def run_java_backend(self):
        """Executa o backend Java."""
        print("üöÄ Iniciando Backend Java...")
        
        java_src = self.java_dir / "src"
        
        if not java_src.exists():
            print("‚ùå Diret√≥rio src do Java n√£o encontrado!")
            return False
        
        try:
            # Verifica se existe script espec√≠fico do Windows
            if os.name == 'nt':  # Windows
                windows_script = self.java_dir / "compile_windows.bat"
                if windows_script.exists():
                    print("üì¶ Usando script otimizado para Windows...")
                    result = subprocess.run([str(windows_script)], 
                                          cwd=self.java_dir, shell=True)
                    return result.returncode == 0
            
            # Compila√ß√£o manual arquivo por arquivo (mais compat√≠vel)
            print("üì¶ Compilando classes Java...")
            
            # Lista de arquivos para compilar em ordem
            java_files = [
                "br/com/micromedicao/model/Sample.java",
                "br/com/micromedicao/model/Operator.java", 
                "br/com/micromedicao/model/DigitalMicroscope.java",
                "br/com/micromedicao/model/MicroscopyImage.java",
                "br/com/micromedicao/model/Measurement.java",
                "br/com/micromedicao/service/MicromedicaoService.java",
                "br/com/micromedicao/integration/DataIntegration.java", 
                "br/com/micromedicao/app/App.java"
            ]
            
            # Compila cada arquivo
            for java_file in java_files:
                print(f"  - Compilando {java_file}")
                compile_cmd = ["javac", "-encoding", "UTF-8", "-cp", ".", java_file]
                
                result = subprocess.run(compile_cmd, cwd=java_src, 
                                      capture_output=True, text=True)
                
                if result.returncode != 0:
                    print(f"‚ùå Erro ao compilar {java_file}:")
                    print(result.stderr)
                    return False
            
            print("‚úÖ Compila√ß√£o bem-sucedida!")
            
            # Executa
            print("üèÉ Executando aplica√ß√£o...")
            run_cmd = ["java", "br.com.micromedicao.app.App"]
            
            subprocess.run(run_cmd, cwd=java_src)
            
        except FileNotFoundError:
            print("‚ùå Java n√£o encontrado. Instale o JDK 8 ou superior.")
            print("üí° Download: https://www.oracle.com/java/technologies/downloads/")
            return False
        except Exception as e:
            print(f"‚ùå Erro ao executar backend: {e}")
            return False
        
        return True
    
    def run_python_interface(self):
        """Executa a interface Python."""
        print("üöÄ Iniciando Interface Python...")
        
        if not self.python_dir.exists():
            print("‚ùå Diret√≥rio Python n√£o encontrado!")
            return False
        
        # Verifica se o arquivo principal existe
        gui_file = self.python_dir / "microscope_gui.py"
        if not gui_file.exists():
            print("‚ùå Arquivo microscope_gui.py n√£o encontrado!")
            return False
        
        try:
            # Verifica depend√™ncias
            print("üì¶ Verificando depend√™ncias...")
            import cv2
            import numpy as np
            from PIL import Image
            import tkinter as tk
            print("‚úÖ Depend√™ncias OK!")
            
            # Executa interface
            print("üèÉ Iniciando interface gr√°fica...")
            subprocess.run([sys.executable, "microscope_gui.py"], 
                         cwd=self.python_dir)
            
        except ImportError as e:
            print(f"‚ùå Depend√™ncia faltando: {e}")
            print("üí° Execute: pip install -r requirements.txt")
            return False
        except Exception as e:
            print(f"‚ùå Erro ao executar interface: {e}")
            return False
        
        return True
    
    def open_dashboard(self):
        """Abre o dashboard web."""
        print("üöÄ Abrindo Dashboard Web...")
        
        dashboard_file = self.frontend_dir / "index.html"
        
        if not dashboard_file.exists():
            print("‚ùå Arquivo index.html n√£o encontrado!")
            return False
        
        try:
            # Abre no navegador padr√£o
            webbrowser.open(f"file://{dashboard_file.absolute()}")
            print("‚úÖ Dashboard aberto no navegador!")
            print("üí° Se n√£o abriu automaticamente, acesse:")
            print(f"   file://{dashboard_file.absolute()}")
            
        except Exception as e:
            print(f"‚ùå Erro ao abrir dashboard: {e}")
            return False
        
        return True
    
    def generate_sample_data(self):
        """Gera dados de exemplo."""
        print("üöÄ Gerando dados de exemplo...")
        
        try:
            # Executa o script de integra√ß√£o
            integration_script = self.base_dir / "integration_example.py"
            if integration_script.exists():
                subprocess.run([sys.executable, str(integration_script)])
            else:
                print("‚ùå Script de integra√ß√£o n√£o encontrado!")
                return False
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar dados: {e}")
            return False
        
        return True
    
    def check_requirements(self):
        """Verifica os requisitos do sistema."""
        print("üîç Verificando requisitos do sistema...")
        print()
        
        # Verifica Java
        try:
            result = subprocess.run(["java", "-version"], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                version = result.stderr.split('\n')[0]
                print(f"‚úÖ Java: {version}")
            else:
                print("‚ùå Java n√£o encontrado")
        except:
            print("‚ùå Java n√£o encontrado")
        
        # Verifica Python
        print(f"‚úÖ Python: {sys.version}")
        
        # Verifica depend√™ncias Python
        dependencies = ["cv2", "numpy", "PIL", "tkinter"]
        for dep in dependencies:
            try:
                __import__(dep)
                print(f"‚úÖ {dep}: Instalado")
            except ImportError:
                print(f"‚ùå {dep}: N√£o instalado")
        
        # Verifica estrutura de arquivos
        print("\nüìÅ Verificando estrutura de arquivos...")
        
        required_files = [
            "backend-java/src/br/com/micromedicao/app/App.java",
            "python-vision/microscope_gui.py",
            "frontend-dashboard/index.html",
            "README.md"
        ]
        
        for file_path in required_files:
            full_path = self.base_dir / file_path
            if full_path.exists():
                print(f"‚úÖ {file_path}")
            else:
                print(f"‚ùå {file_path}")
        
        print("\n‚úÖ Verifica√ß√£o conclu√≠da!")
    
    def run_full_integration(self):
        """Executa integra√ß√£o completa."""
        print("üöÄ Executando integra√ß√£o completa...")
        print()
        
        print("1/4 - Gerando dados de exemplo...")
        if not self.generate_sample_data():
            return False
        
        print("\n2/4 - Compilando backend Java...")
        time.sleep(2)
        
        print("\n3/4 - Abrindo dashboard...")
        self.open_dashboard()
        time.sleep(2)
        
        print("\n4/4 - Sistema pronto!")
        print("‚úÖ Integra√ß√£o completa finalizada!")
        print()
        print("üìã Pr√≥ximos passos:")
        print("   ‚Ä¢ Use op√ß√£o 1 para testar o backend Java")
        print("   ‚Ä¢ Use op√ß√£o 2 para capturar medi√ß√µes reais")
        print("   ‚Ä¢ O dashboard j√° est√° aberto no navegador")
        
        return True
    
    def compile_java(self):
        """Compila apenas o backend Java."""
        print("üöÄ Compilando Backend Java...")
        
        java_src = self.java_dir / "src"
        
        if not java_src.exists():
            print("‚ùå Diret√≥rio src do Java n√£o encontrado!")
            return False
        
        try:
            # Lista de arquivos para compilar em ordem
            java_files = [
                "br/com/micromedicao/model/Sample.java",
                "br/com/micromedicao/model/Operator.java", 
                "br/com/micromedicao/model/DigitalMicroscope.java",
                "br/com/micromedicao/model/MicroscopyImage.java",
                "br/com/micromedicao/model/Measurement.java",
                "br/com/micromedicao/service/MicromedicaoService.java",
                "br/com/micromedicao/integration/DataIntegration.java", 
                "br/com/micromedicao/app/App.java"
            ]
            
            # Compila cada arquivo
            for java_file in java_files:
                print(f"  - Compilando {java_file}")
                compile_cmd = ["javac", "-encoding", "UTF-8", "-cp", ".", java_file]
                
                result = subprocess.run(compile_cmd, cwd=java_src, 
                                      capture_output=True, text=True)
                
                if result.returncode != 0:
                    print(f"‚ùå Erro ao compilar {java_file}:")
                    print(result.stderr)
                    return False
            
            print("‚úÖ Compila√ß√£o bem-sucedida!")
            print("üí° Use a op√ß√£o 1 para executar a aplica√ß√£o.")
            
        except FileNotFoundError:
            print("‚ùå Java n√£o encontrado. Instale o JDK 8 ou superior.")
            print("üí° Download: https://www.oracle.com/java/technologies/downloads/")
            return False
        except Exception as e:
            print(f"‚ùå Erro na compila√ß√£o: {e}")
            return False
        
        return True
    
    def run(self):
        """Executa o launcher principal."""
        while True:
            self.show_menu()
            
            try:
                choice = input("Digite sua escolha (0-7): ").strip()
                print()
                
                if choice == "0":
                    print("üëã Saindo do sistema...")
                    break
                elif choice == "1":
                    self.run_java_backend()
                elif choice == "2":
                    self.run_python_interface()
                elif choice == "3":
                    self.open_dashboard()
                elif choice == "4":
                    self.generate_sample_data()
                elif choice == "5":
                    self.check_requirements()
                elif choice == "6":
                    self.run_full_integration()
                elif choice == "7":
                    self.compile_java()
                else:
                    print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
                
                if choice != "0":
                    input("\nPressione Enter para continuar...")
                    print("\n" + "="*62)
                
            except KeyboardInterrupt:
                print("\n\nüëã Saindo do sistema...")
                break
            except Exception as e:
                print(f"‚ùå Erro inesperado: {e}")
                input("Pressione Enter para continuar...")

def main():
    """Fun√ß√£o principal."""
    launcher = SystemLauncher()
    launcher.run()

if __name__ == "__main__":
    main()