"""
M√≥dulo de Vis√£o Computacional para Sistema de Micromedi√ß√£o
Este m√≥dulo implementa a captura de v√≠deo em tempo real, processamento
de imagens para detec√ß√£o de amostras e c√°lculo de √°reas, com pr√©via
em tempo real e funcionalidade de registro de medi√ß√µes.

Autor: Sistema de Micromedi√ß√£o
Vers√£o: 1.0
"""

import cv2
import numpy as np
import time
import os
import json
import csv
from datetime import datetime
from typing import Tuple, Optional, Dict, Any
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from PIL import Image, ImageTk
import threading


class MicroscopeVision:
    """
    Classe principal para vis√£o computacional do microsc√≥pio.
    Gerencia captura de v√≠deo, processamento de imagens e c√°lculo de √°reas.
    """

    @staticmethod
    def detect_available_cameras() -> Dict[int, str]:
        """
        Detecta c√¢meras dispon√≠veis no sistema.

        Returns:
            Dict[int, str]: Dicion√°rio com √≠ndice da c√¢mera e descri√ß√£o
        """
        available_cameras = {}

        print("üîç Detectando c√¢meras dispon√≠veis...")

        # Testa at√© 10 √≠ndices de c√¢mera
        for i in range(10):
            cap = cv2.VideoCapture(i)
            if cap.isOpened():
                # Tenta capturar um frame para verificar se funciona
                ret, frame = cap.read()
                if ret and frame is not None:
                    # Obt√©m informa√ß√µes da c√¢mera
                    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                    fps = int(cap.get(cv2.CAP_PROP_FPS))

                    description = f"C√¢mera {i} - {width}x{height}@{fps}fps"
                    available_cameras[i] = description
                    print(f"‚úÖ {description}")
                else:
                    print(f"‚ùå C√¢mera {i} - N√£o conseguiu capturar frame")
                cap.release()
            else:
                # N√£o mostra erro para √≠ndices sem c√¢mera para evitar spam
                pass

        if not available_cameras:
            print("‚ùå Nenhuma c√¢mera detectada!")
            # Adiciona c√¢mera padr√£o como fallback
            available_cameras[0] = "C√¢mera Padr√£o (pode n√£o funcionar)"

        print(f"üì∑ Total de c√¢meras detectadas: {len(available_cameras)}")
        return available_cameras

    def __init__(self, camera_index: int = 0, scale_pixels_per_um: float = 10.0):
        """
        Inicializa o sistema de vis√£o computacional.
        
        Args:
            camera_index: √çndice da c√¢mera (0 para c√¢mera padr√£o)
            scale_pixels_per_um: Escala de convers√£o pixels/micr√¥metro
        """
        self.camera_index = camera_index
        self.scale_pixels_per_um = scale_pixels_per_um
        self.cap = None
        self.current_frame = None
        self.processed_frame = None
        self.current_area_pixels = 0
        self.current_area_um2 = 0.0
        self.is_running = False
        
        # Par√¢metros de processamento de imagem
        self.blur_kernel_size = 5
        self.threshold_value = 120
        self.min_contour_area = 500  # Aumentado para formas maiores
        self.max_contour_area = 300000000
        self.debug_mode = False  # Para mostrar imagens intermedi√°rias
        
        # Configura√ß√µes de arquivo
        self.output_dir = "../data-integration"
        self.ensure_output_directory()
        
    def ensure_output_directory(self):
        """Garante que o diret√≥rio de sa√≠da existe."""
        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)
            
    def initialize_camera(self) -> bool:
        """
        Inicializa a c√¢mera.
        
        Returns:
            bool: True se a c√¢mera foi inicializada com sucesso
        """
        try:
            self.cap = cv2.VideoCapture(self.camera_index)
            if not self.cap.isOpened():
                print(f"Erro: N√£o foi poss√≠vel abrir a c√¢mera {self.camera_index}")
                return False
                
            # Configura resolu√ß√£o se poss√≠vel
            self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
            self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
            
            print(f"C√¢mera inicializada com sucesso (index: {self.camera_index})")
            return True
            
        except Exception as e:
            print(f"Erro ao inicializar c√¢mera: {e}")
            return False
    
    def release_camera(self):
        """Libera os recursos da c√¢mera."""
        if self.cap:
            self.cap.release()
            self.cap = None

    def change_camera(self, new_camera_index: int) -> bool:
        """
        Troca para uma nova c√¢mera.

        Args:
            new_camera_index: √çndice da nova c√¢mera

        Returns:
            bool: True se a troca foi bem-sucedida
        """
        # Libera c√¢mera atual
        self.release_camera()

        # Tenta inicializar nova c√¢mera
        self.camera_index = new_camera_index
        success = self.initialize_camera()

        if success:
            print(f"‚úÖ C√¢mera trocada com sucesso para √≠ndice {new_camera_index}")
        else:
            print(f"‚ùå Falha ao trocar para c√¢mera {new_camera_index}")

        return success

    def get_camera_info(self) -> Dict[str, Any]:
        """
        Obt√©m informa√ß√µes da c√¢mera atual.

        Returns:
            Dict com informa√ß√µes da c√¢mera
        """
        if not self.cap or not self.cap.isOpened():
            return {"status": "Desconectada", "index": self.camera_index}

        width = int(self.cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        fps = int(self.cap.get(cv2.CAP_PROP_FPS))

        return {
            "status": "Conectada",
            "index": self.camera_index,
            "resolution": f"{width}x{height}",
            "fps": fps,
            "description": f"C√¢mera {self.camera_index} - {width}x{height}@{fps}fps"
        }
    
    def capture_frame(self) -> bool:
        """
        Captura um frame da c√¢mera.
        
        Returns:
            bool: True se o frame foi capturado com sucesso
        """
        if not self.cap:
            return False
            
        ret, frame = self.cap.read()
        if ret:
            self.current_frame = frame.copy()
            return True
        return False
    
    def process_frame(self) -> Tuple[np.ndarray, float, int]:
        """
        Processa o frame atual para detectar e medir amostras.
        
        Returns:
            Tuple[np.ndarray, float, int]: Frame processado, √°rea em Œºm¬≤, √°rea em pixels
        """
        if self.current_frame is None:
            return None, 0.0, 0
        
        # Cria uma c√≥pia do frame para processamento
        frame = self.current_frame.copy()
        
        # Converte para escala de cinza
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        
        # Aplica filtro Gaussiano para reduzir ru√≠do
        blurred = cv2.GaussianBlur(gray, (self.blur_kernel_size, self.blur_kernel_size), 0)
        
        # Aplica threshold para binarizar a imagem (THRESH_BINARY_INV para objetos escuros)
        _, thresh = cv2.threshold(blurred, self.threshold_value, 255, cv2.THRESH_BINARY_INV)
        
        # Aplica opera√ß√µes morfol√≥gicas suaves para preservar formas irregulares
        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (2, 2))
        thresh = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)  # Fecha pequenos buracos apenas
        
        # Encontra contornos
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        # Filtra contornos por √°rea
        valid_contours = []
        total_area_pixels = 0
        
        for contour in contours:
            area = cv2.contourArea(contour)
            if self.min_contour_area <= area <= self.max_contour_area:
                valid_contours.append(contour)
                total_area_pixels += area
        
        # Desenha contornos no frame original
        cv2.drawContours(frame, valid_contours, -1, (0, 255, 0), 2)
        
        # Adiciona pontos centrais dos contornos para melhor visualiza√ß√£o
        for contour in valid_contours:
            M = cv2.moments(contour)
            if M["m00"] != 0:
                cx = int(M["m10"] / M["m00"])
                cy = int(M["m01"] / M["m00"])
                cv2.circle(frame, (cx, cy), 5, (0, 255, 0), -1)
        
        # Calcula √°rea total em micr√¥metros quadrados
        total_area_um2 = total_area_pixels / (self.scale_pixels_per_um ** 2)
        
        # Debug removido - sem janelas extras
        
        # Adiciona informa√ß√µes de texto no frame
        self._add_info_text(frame, total_area_pixels, total_area_um2, len(valid_contours))
        
        # Atualiza valores atuais
        self.current_area_pixels = total_area_pixels
        self.current_area_um2 = total_area_um2
        self.processed_frame = frame
        
        return frame, total_area_um2, total_area_pixels
    
    def _add_info_text(self, frame: np.ndarray, area_pixels: int, area_um2: float, num_contours: int):
        """
        Adiciona informa√ß√µes de texto no frame.
        
        Args:
            frame: Frame onde adicionar o texto
            area_pixels: √Årea em pixels
            area_um2: √Årea em micr√¥metros quadrados
            num_contours: N√∫mero de contornos detectados
        """
        font = cv2.FONT_HERSHEY_SIMPLEX
        font_scale = 0.6
        color = (255, 255, 255)
        thickness = 2
        
        # Fundo semi-transparente para o texto
        overlay = frame.copy()
        cv2.rectangle(overlay, (10, 10), (400, 120), (0, 0, 0), -1)
        cv2.addWeighted(overlay, 0.7, frame, 0.3, 0, frame)
        
        # Adiciona textos informativos
        cv2.putText(frame, f"Contornos detectados: {num_contours}", (15, 30), font, font_scale, color, thickness)
        cv2.putText(frame, f"Area total: {area_pixels} pixels", (15, 55), font, font_scale, color, thickness)
        cv2.putText(frame, f"Area total: {area_um2:.2f} um2", (15, 80), font, font_scale, color, thickness)
        cv2.putText(frame, f"Escala: {self.scale_pixels_per_um:.1f} px/um", (15, 105), font, font_scale, color, thickness)
    
    def save_measurement(self, sample_id: str = "AUTO", operator: str = "Sistema") -> Dict[str, Any]:
        """
        Salva a medi√ß√£o atual em arquivos CSV e JSON.
        
        Args:
            sample_id: ID da amostra
            operator: Nome do operador
            
        Returns:
            Dict com informa√ß√µes da medi√ß√£o salva
        """
        if self.current_frame is None or self.processed_frame is None:
            return None
        
        timestamp = datetime.now()
        measurement_id = f"MEAS_{int(timestamp.timestamp())}"
        image_id = f"IMG_{int(timestamp.timestamp())}"
        image_filename = f"{image_id}.jpg"
        image_path = os.path.join(self.output_dir, image_filename)
        
        # Salva a imagem original
        cv2.imwrite(image_path, self.current_frame)
        
        # Salva tamb√©m a imagem processada para refer√™ncia
        processed_filename = f"{image_id}_processed.jpg"
        processed_path = os.path.join(self.output_dir, processed_filename)
        cv2.imwrite(processed_path, self.processed_frame)
        
        # Cria dados da medi√ß√£o
        measurement_data = {
            "id": measurement_id,
            "sampleId": sample_id,
            "area_pixels": self.current_area_pixels,
            "area_um2": round(self.current_area_um2, 2),
            "dataHora": timestamp.strftime("%Y-%m-%d %H:%M:%S"),
            "imagemId": image_id,
            "nomeImagem": image_filename,
            "operator": operator,
            "scale_pixels_per_um": self.scale_pixels_per_um
        }
        
        # Salva em CSV
        self._save_to_csv(measurement_data)
        
        # Salva em JSON
        self._save_to_json(measurement_data)
        
        print(f"Medi√ß√£o salva: {measurement_id}")
        print(f"√Årea: {self.current_area_um2:.2f} Œºm¬≤ ({self.current_area_pixels} pixels)")
        print(f"Imagem: {image_filename}")
        
        return measurement_data
    
    def _save_to_csv(self, measurement_data: Dict[str, Any]):
        """
        Salva medi√ß√£o em arquivo CSV.
        
        Args:
            measurement_data: Dados da medi√ß√£o
        """
        csv_path = os.path.join(self.output_dir, "measurements.csv")
        file_exists = os.path.exists(csv_path)
        
        with open(csv_path, 'a', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['id', 'sampleId', 'area_pixels', 'area_um2', 'dataHora', 
                         'imagemId', 'nomeImagem', 'operator', 'scale_pixels_per_um']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            # Escreve cabe√ßalho se o arquivo n√£o existir
            if not file_exists:
                writer.writeheader()
            
            writer.writerow(measurement_data)
    
    def _save_to_json(self, measurement_data: Dict[str, Any]):
        """
        Salva medi√ß√£o em arquivo JSON.
        
        Args:
            measurement_data: Dados da medi√ß√£o
        """
        json_path = os.path.join(self.output_dir, "measurements.json")
        
        # Carrega dados existentes ou cria lista vazia
        measurements = []
        if os.path.exists(json_path):
            try:
                with open(json_path, 'r', encoding='utf-8') as jsonfile:
                    data = json.load(jsonfile)
                    measurements = data.get('measurements', [])
            except json.JSONDecodeError:
                measurements = []
        
        # Adiciona nova medi√ß√£o
        measurements.append(measurement_data)
        
        # Salva dados atualizados
        with open(json_path, 'w', encoding='utf-8') as jsonfile:
            json.dump({"measurements": measurements}, jsonfile, indent=2, ensure_ascii=False)
    
    def adjust_parameters(self, blur_kernel: int = None, threshold: int = None, 
                         min_area: int = None, max_area: int = None, scale: float = None):
        """
        Ajusta par√¢metros de processamento.
        
        Args:
            blur_kernel: Tamanho do kernel de blur
            threshold: Valor de threshold
            min_area: √Årea m√≠nima de contorno
            max_area: √Årea m√°xima de contorno
            scale: Escala pixels/micr√¥metro
        """
        if blur_kernel is not None:
            self.blur_kernel_size = max(1, blur_kernel if blur_kernel % 2 == 1 else blur_kernel + 1)
        if threshold is not None:
            self.threshold_value = max(0, min(255, threshold))
        if min_area is not None:
            self.min_contour_area = max(1, min_area)
        if max_area is not None:
            self.max_contour_area = max(self.min_contour_area, max_area)
        if scale is not None:
            self.scale_pixels_per_um = max(0.1, scale)
    
    def toggle_debug_mode(self):
        """Alterna o modo de debug."""
        self.debug_mode = not self.debug_mode
        if not self.debug_mode:
            cv2.destroyWindow('Debug - Threshold')
            cv2.destroyWindow('Debug - Gray')
        print(f"Modo debug: {'ativado' if self.debug_mode else 'desativado'}")
    
    def get_measurement_info(self) -> Dict[str, Any]:
        """
        Retorna informa√ß√µes da medi√ß√£o atual.
        
        Returns:
            Dict com informa√ß√µes da medi√ß√£o atual
        """
        return {
            "area_pixels": self.current_area_pixels,
            "area_um2": round(self.current_area_um2, 2),
            "scale": self.scale_pixels_per_um,
            "parameters": {
                "blur_kernel": self.blur_kernel_size,
                "threshold": self.threshold_value,
                "min_area": self.min_contour_area,
                "max_area": self.max_contour_area
            }
        }


def main():
    """Fun√ß√£o principal para teste do m√≥dulo de vis√£o computacional."""
    print("=== SISTEMA DE VIS√ÉO COMPUTACIONAL ===")
    print("Inicializando m√≥dulo de micromedi√ß√£o...")
    
    # Cria inst√¢ncia do sistema de vis√£o
    vision = MicroscopeVision()
    
    # Inicializa c√¢mera
    if not vision.initialize_camera():
        print("Erro: N√£o foi poss√≠vel inicializar a c√¢mera")
        return
    
    print("C√¢mera inicializada. Pressione:")
    print("- ESPA√áO: Registrar medi√ß√£o")
    print("- 's': Salvar medi√ß√£o atual")
    print("- 'q': Sair")
    print("- '+'/'-': Ajustar threshold")
    print("- 'd': Alternar modo debug")
    
    try:
        while True:
            # Captura frame
            if not vision.capture_frame():
                print("Erro ao capturar frame")
                break
            
            # Processa frame
            processed_frame, area_um2, area_pixels = vision.process_frame()
            
            if processed_frame is not None:
                # Mostra frame processado
                cv2.imshow('Microscope Vision - Real Time', processed_frame)
            
            # Processa teclas
            key = cv2.waitKey(1) & 0xFF
            
            if key == ord('q'):
                break
            elif key == ord('s') or key == ord(' '):
                measurement = vision.save_measurement(f"SAMPLE_{int(time.time())}")
                if measurement:
                    print(f"Medi√ß√£o registrada: {measurement['id']}")
            elif key == ord('+') or key == ord('='):
                vision.adjust_parameters(threshold=vision.threshold_value + 5)
                print(f"Threshold ajustado para: {vision.threshold_value}")
            elif key == ord('-'):
                vision.adjust_parameters(threshold=vision.threshold_value - 5)
                print(f"Threshold ajustado para: {vision.threshold_value}")
            elif key == ord('d'):
                vision.toggle_debug_mode()
    
    except KeyboardInterrupt:
        print("\nInterrompido pelo usu√°rio")
    
    finally:
        # Limpa recursos
        vision.release_camera()
        cv2.destroyAllWindows()
        print("Sistema finalizado")


if __name__ == "__main__":
    main()